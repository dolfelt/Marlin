#!/bin/bash

set -xe

. $(dirname "$0")/env

UPSTREAM_REPOSITORY="${UPSTREAM_REPOSITORY:-https://github.com/MarlinFirmware/Marlin.git}"
UPSTREAM_REMOTE_NAME="${UPSTREAM_REMOTE_NAME:-upstream}"
ORIGIN_REMOTE_NAME="${ORIGIN_REMOTE_NAME:-origin}"
UPSTREAM_BRANCH="${UPSTREAM_BRANCH:-bugfix-2.0.x}"
BUILD_BRANCH="${BUILD_BRANCH:-v1-$UPSTREAM_BRANCH}"

# Pull requests and other patches to be applied on top of the upsteam branch
. $V1_ROOT/$CFGDIR/patches/$UPSTREAM_BRANCH

cd "$V1_ROOT/$MARLINDIR"

# Check to see if the submodule has been initialized
[[ -f .git ]] || (echo -e "\n\033[0;31mMissing git submodule, make sure to run\ngit submodule update --init --recursive\033[0m"; exit 1)

git remote add -f -t "$UPSTREAM_BRANCH" $UPSTREAM_REMOTE_NAME "$UPSTREAM_REPOSITORY"
trap "git remote remove $UPSTREAM_REMOTE_NAME" EXIT

# Start with vanilla upstream code
git checkout "$UPSTREAM_REMOTE_NAME/$UPSTREAM_BRANCH"
git show-ref --verify "refs/remotes/$UPSTREAM_REMOTE_NAME/$UPSTREAM_BRANCH" > v1-manifest

# Fetch and merge upstream pull requests we deem necessary to carry in our version
# See: https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/checking-out-pull-requests-locally
for pr in $PULL_REQUESTS; do
    git fetch $UPSTREAM_REMOTE_NAME "pull/$pr/head"
    echo "$(git rev-parse FETCH_HEAD) refs/remotes/$UPSTREAM_REMOTE_NAME/pull/$pr/head" >> v1-manifest
    git merge --no-stat --no-ff --no-edit FETCH_HEAD
done

for branch in $ADD_BRANCHES; do
    git fetch "$ORIGIN_REMOTE_NAME" "$branch"
    echo "$(git rev-parse FETCH_HEAD) refs/remotes/$ORIGIN_REMOTE_NAME/$branch" >> v1-manifest
    git merge --no-stat --no-ff --no-edit FETCH_HEAD
done

# Store manifest
git add v1-manifest
git commit -m 'manifest'

# Generate and commit configs
generate-configs
commit-configs

# Helpful message to user when running locally
old_ref=$(git rev-parse --verify "$BUILD_BRANCH" 2> /dev/null) && \
    echo "Overwriting $BUILD_BRANCH branch. Use git checkout -b new-name $old_ref to get it back"

# Store results in a local branch
git branch -f "$BUILD_BRANCH"
git branch -u "$ORIGIN_REMOTE_NAME/$BUILD_BRANCH" "$BUILD_BRANCH" || true # OK to fail
